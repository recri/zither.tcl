#!/usr/bin/wish

# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2024 by Roger E Critchlow Jr, Las Cruces, NM, USA
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

lappend auto_path . ../keyer/lib

package require ::params
package require ::evdev
package require ::window
package require ::sound

array set data {
    t 0
    0.x 0 0.y 0
    1.x 0 1.y 0
    2.x 0 2.y 0
    3.x 0 3.y 0
    4.x 0 4.y 0
    5.x 0 5.y 0
    6.x 0 6.y 0
    7.x 0 7.y 0
    8.x 0 8.y 0
    9.x 0 9.y 0
}

proc evdev-handler {w event} {
    # puts "evdev-handler $w {$event}"
    if {[llength $event] == 0} { # skip the empty event
	return
    }
    # if the event starts with a {t}, 
    # implement the change here
    if {[lindex $event 0] eq {t}} {
	set t [lindex $event 1]
	set event [lrange $event 2 end]
    } else {
	set t $::data(t)
    }
    # cache the coordinates
    set x $::data($t.x)
    set y $::data($t.y)
    set e <<TouchUpdate>>
    foreach {key value} $event {
	switch $key {
	    * { error "found an * inside the event" }
	    t { 
		event generate $w $e -data $t -x $x -y $y
		set ::data($t.x) $x
		set ::data($t.y) $y
		set t $value
		set x $::data($t.x)
		set y $::data($t.y)
		set e <<TouchUpdate>>
	    }
	    x { set x $value }
	    y { set y $value }
	    i { if {$value >= 0} { set e <<TouchBegin>> } else { set e <<TouchEnd>> } }
	    default { error "unkonwn key value $key $value" }
	}
    }
    event generate $w $e -data $t -x $x -y $y
    set ::data($t.x) $x
    set ::data($t.y) $y
    set ::data(t) $t
}

if {$::params::dev ne {}} {
    after 1 {::evdev::touch $::params::dev {::evdev-handler .c}}
}

# may or may not set wish . to fill screen
wm attributes . -fullscreen $::params::fullscreen

::window::main {}
.c configure -width $::params::width -height $::params::height -bg black -bd 0 -highlightthickness 0 -insertborderwidth 0 -selectborderwidth 0
